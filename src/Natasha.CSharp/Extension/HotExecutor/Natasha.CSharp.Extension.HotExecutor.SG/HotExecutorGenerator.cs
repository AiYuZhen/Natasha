using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Diagnostics;
using System.Linq;

namespace Natasha.CSharp.Extension.HotExecutor.SG
{
    [Generator]
    public class HotExecutorGenerator : ISourceGenerator
    {

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }

        void ISourceGenerator.Execute(GeneratorExecutionContext context)
        {
            //Debugger.Launch();
            var mainFile = string.Empty;
            var lineNumber = 0;
            var characterPosition = 0;
            var syntaxTrees = context.Compilation.SyntaxTrees;
            foreach (var tree in syntaxTrees)
            {
                var methods = tree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>();
                if (methods.Any(method => method.Identifier.Text == "Main"))
                {
                    var mainMethod = methods.FirstOrDefault(method => method.Identifier.Text == "Main");
                    mainFile = tree.FilePath;
                    
                    var lineSpan = mainMethod.GetLocation().GetLineSpan();
                    lineNumber = lineSpan.StartLinePosition.Line + 1;
                    characterPosition = lineSpan.StartLinePosition.Character + 1;
                    //Debugger.Launch();
                    string proxyMethodContent = $@"

using System.Runtime.CompilerServices;

namespace System{{


    public static class InterceptMain
    {{
        
        [InterceptsLocation(
            filePath: @""{mainFile}"",
            line: {lineNumber},
            character: {characterPosition})]
        public static void InterceptMethodMain(string args[])
        {{
            
            Console.WriteLine(11);

        }}

    }}
}}
// <auto-generated/>
namespace System.Runtime.CompilerServices
{{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute
    {{
    }}
}}

";

             context.AddSource($"NatashaHotExecutorProxy.g.cs", proxyMethodContent);
                    break;
                }
            }
        }
    }
}
